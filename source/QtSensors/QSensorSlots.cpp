/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2021 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QSensorSlots.h"

QSensorSlots::QSensorSlots( QObject *parent ) : QObject( parent )
{
}

QSensorSlots::~QSensorSlots()
{
}

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::busyChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "busyChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::activeChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "activeChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::readingChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "readingChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::sensorError( int error )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "sensorError(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM perror = hb_itemPutNI( NULL, error );

    hb_vmEvalBlockV( cb, 2, psender, perror );

    hb_itemRelease( psender );
    hb_itemRelease( perror );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::availableSensorsChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "availableSensorsChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::alwaysOnChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "alwaysOnChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::dataRateChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "dataRateChanged()" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::skipDuplicatesChanged( bool skipDuplicates )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "skipDuplicatesChanged(bool)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM pskipDuplicates = hb_itemPutL( NULL, skipDuplicates );

    hb_vmEvalBlockV( cb, 2, psender, pskipDuplicates );

    hb_itemRelease( psender );
    hb_itemRelease( pskipDuplicates );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::axesOrientationModeChanged( QSensor::AxesOrientationMode axesOrientationMode )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "axesOrientationModeChanged(QSensor::AxesOrientationMode)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM paxesOrientationMode = hb_itemPutNI( NULL, (int) axesOrientationMode );

    hb_vmEvalBlockV( cb, 2, psender, paxesOrientationMode );

    hb_itemRelease( psender );
    hb_itemRelease( paxesOrientationMode );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::currentOrientationChanged( int currentOrientation )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "currentOrientationChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM pcurrentOrientation = hb_itemPutNI( NULL, currentOrientation );

    hb_vmEvalBlockV( cb, 2, psender, pcurrentOrientation );

    hb_itemRelease( psender );
    hb_itemRelease( pcurrentOrientation );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::userOrientationChanged( int userOrientation )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "userOrientationChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM puserOrientation = hb_itemPutNI( NULL, userOrientation );

    hb_vmEvalBlockV( cb, 2, psender, puserOrientation );

    hb_itemRelease( psender );
    hb_itemRelease( puserOrientation );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::maxBufferSizeChanged( int maxBufferSize )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "maxBufferSizeChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM pmaxBufferSize = hb_itemPutNI( NULL, maxBufferSize );

    hb_vmEvalBlockV( cb, 2, psender, pmaxBufferSize );

    hb_itemRelease( psender );
    hb_itemRelease( pmaxBufferSize );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::efficientBufferSizeChanged( int efficientBufferSize )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "efficientBufferSizeChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM pefficientBufferSize = hb_itemPutNI( NULL, efficientBufferSize );

    hb_vmEvalBlockV( cb, 2, psender, pefficientBufferSize );

    hb_itemRelease( psender );
    hb_itemRelease( pefficientBufferSize );
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
void QSensorSlots::bufferSizeChanged( int bufferSize )
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock( object, "bufferSizeChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject( (QObject *) object, "QSENSOR" );
    PHB_ITEM pbufferSize = hb_itemPutNI( NULL, bufferSize );

    hb_vmEvalBlockV( cb, 2, psender, pbufferSize );

    hb_itemRelease( psender );
    hb_itemRelease( pbufferSize );
  }
}
#endif

void QSensorSlots_connect_signal( const QString & signal, const QString & slot )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,1,0))
  QSensor * obj = (QSensor *) Qt5xHb::itemGetPtrStackSelfItem();

  if( obj )
  {
    QSensorSlots * s = QCoreApplication::instance()->findChild<QSensorSlots *>();

    if( s == NULL )
    {
      s = new QSensorSlots();
      s->moveToThread( QCoreApplication::instance()->thread() );
      s->setParent( QCoreApplication::instance() );
    }

    hb_retl( Qt5xHb::Signals_connection_disconnection( s, signal, slot ) );
  }
  else
  {
    hb_retl( false );
  }
#else
  hb_retl( false );
#endif
}

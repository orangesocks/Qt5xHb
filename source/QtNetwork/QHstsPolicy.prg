/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2019 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QDATETIME
#endif

CLASS QHstsPolicy

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD swap
   METHOD setHost
   METHOD host
   METHOD setExpiry
   METHOD expiry
   METHOD setIncludesSubDomains
   METHOD includesSubDomains
   METHOD isExpired

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QHstsPolicy
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
#include <QtNetwork/QHstsPolicy>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
#include <QtNetwork/QHstsPolicy>
#endif
#endif

#include <QtCore/QDateTime>

/*
QHstsPolicy()
*/
void QHstsPolicy_new1 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * o = new QHstsPolicy ();
  _qt5xhb_returnNewObject( o, true );
#endif
}

/*
QHstsPolicy(const QDateTime &expiry, PolicyFlags flags, const QString &host, QUrl::ParsingMode mode = QUrl::DecodedMode)
*/
void QHstsPolicy_new2 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * o = new QHstsPolicy ( *PQDATETIME(1), (QHstsPolicy::PolicyFlags) hb_parni(2), PQSTRING(3), ISNIL(4)? (QUrl::ParsingMode) QUrl::DecodedMode : (QUrl::ParsingMode) hb_parni(4) );
  _qt5xhb_returnNewObject( o, true );
#endif
}

/*
QHstsPolicy(const QHstsPolicy &rhs)
*/
void QHstsPolicy_new3 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * o = new QHstsPolicy ( *PQHSTSPOLICY(1) );
  _qt5xhb_returnNewObject( o, true );
#endif
}

//[1]QHstsPolicy()
//[2]QHstsPolicy(const QDateTime &expiry, PolicyFlags flags, const QString &host, QUrl::ParsingMode mode = QUrl::DecodedMode)
//[3]QHstsPolicy(const QHstsPolicy &rhs)

HB_FUNC_STATIC( QHSTSPOLICY_NEW )
{
  if( ISNUMPAR(0) )
  {
    QHstsPolicy_new1();
  }
  else if( ISBETWEEN(3,4) && ISQDATETIME(1) && ISNUM(2) && ISCHAR(3) && (ISNUM(4)||ISNIL(4)) )
  {
    QHstsPolicy_new2();
  }
  else if( ISNUMPAR(1) && ISQHSTSPOLICY(1) )
  {
    QHstsPolicy_new3();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
~QHstsPolicy()
*/
HB_FUNC_STATIC( QHSTSPOLICY_DELETE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void swap(QHstsPolicy &other) Q_DECL_NOTHROW
*/
HB_FUNC_STATIC( QHSTSPOLICY_SWAP )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(1) && ISQHSTSPOLICY(1) )
    {
#endif
      obj->swap ( *PQHSTSPOLICY(1) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void setHost(const QString &host, QUrl::ParsingMode mode = QUrl::DecodedMode)
*/
HB_FUNC_STATIC( QHSTSPOLICY_SETHOST )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN(1,2) && ISCHAR(1) && ISOPTNUM(2) )
    {
#endif
      obj->setHost ( PQSTRING(1), ISNIL(2)? (QUrl::ParsingMode) QUrl::DecodedMode : (QUrl::ParsingMode) hb_parni(2) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString host(QUrl::ComponentFormattingOptions options = QUrl::FullyDecoded) const
*/
HB_FUNC_STATIC( QHSTSPOLICY_HOST )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN(0,1) && ISOPTNUM(1) )
    {
#endif
      RQSTRING( obj->host ( ISNIL(1)? (QUrl::ComponentFormattingOptions) QUrl::FullyDecoded : (QUrl::ComponentFormattingOptions) hb_parni(1) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
#endif
}

/*
void setExpiry(const QDateTime &expiry)
*/
HB_FUNC_STATIC( QHSTSPOLICY_SETEXPIRY )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(1) && ISQDATETIME(1) )
    {
#endif
      obj->setExpiry ( *PQDATETIME(1) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QDateTime expiry() const
*/
HB_FUNC_STATIC( QHSTSPOLICY_EXPIRY )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(0) )
    {
#endif
      QDateTime * ptr = new QDateTime( obj->expiry () );
      _qt5xhb_createReturnClass ( ptr, "QDATETIME", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
#endif
}

/*
void setIncludesSubDomains(bool include)
*/
HB_FUNC_STATIC( QHSTSPOLICY_SETINCLUDESSUBDOMAINS )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(1) && ISLOG(1) )
    {
#endif
      obj->setIncludesSubDomains ( PBOOL(1) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool includesSubDomains() const
*/
HB_FUNC_STATIC( QHSTSPOLICY_INCLUDESSUBDOMAINS )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(0) )
    {
#endif
      RBOOL( obj->includesSubDomains () );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
#endif
}

/*
bool isExpired() const
*/
HB_FUNC_STATIC( QHSTSPOLICY_ISEXPIRED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  QHstsPolicy * obj = (QHstsPolicy *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR(0) )
    {
#endif
      RBOOL( obj->isExpired () );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
#endif
}

HB_FUNC_STATIC( QHSTSPOLICY_NEWFROM )
{
  PHB_ITEM self = hb_stackSelfItem();

  if( hb_pcount() == 1 && ISOBJECT(1) )
  {
    PHB_ITEM ptr = hb_itemPutPtr( NULL, (void *) hb_itemGetPtr( hb_objSendMsg( hb_param(1, HB_IT_OBJECT ), "POINTER", 0 ) ) );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
    PHB_ITEM des = hb_itemPutL( NULL, false );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else if( hb_pcount() == 1 && ISPOINTER(1) )
  {
    PHB_ITEM ptr = hb_itemPutPtr( NULL, (void *) hb_itemGetPtr( hb_param(1, HB_IT_POINTER ) ) );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
    PHB_ITEM des = hb_itemPutL( NULL, false );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }

  hb_itemReturn( self );
}

HB_FUNC_STATIC( QHSTSPOLICY_NEWFROMOBJECT )
{
  HB_FUNC_EXEC( QHSTSPOLICY_NEWFROM );
}

HB_FUNC_STATIC( QHSTSPOLICY_NEWFROMPOINTER )
{
  HB_FUNC_EXEC( QHSTSPOLICY_NEWFROM );
}

HB_FUNC_STATIC( QHSTSPOLICY_SELFDESTRUCTION )
{
  hb_retl( (bool) hb_itemGetL( hb_objSendMsg( hb_stackSelfItem(), "SELF_DESTRUCTION", 0 ) ) );
}

HB_FUNC_STATIC( QHSTSPOLICY_SETSELFDESTRUCTION )
{
  PHB_ITEM self = hb_stackSelfItem();

  if( hb_pcount() == 1 && ISLOG(1) )
  {
    PHB_ITEM des = hb_itemPutL( NULL, hb_parl(1) );
    hb_objSendMsg( self, "_self_destruction", 1, des );
    hb_itemRelease( des );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }

  hb_itemReturn( self );
}

#pragma ENDDUMP

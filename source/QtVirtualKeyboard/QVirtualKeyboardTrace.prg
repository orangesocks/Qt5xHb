/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2019 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QVirtualKeyboardTrace INHERIT QObject

   METHOD delete

   METHOD onTraceIdChanged
   METHOD onChannelsChanged
   METHOD onLengthChanged
   METHOD onFinalChanged
   METHOD onCanceledChanged
   METHOD onOpacityChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QVirtualKeyboardTrace
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtVirtualKeyboard/QVirtualKeyboardTrace>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QtVirtualKeyboard/QVirtualKeyboardTrace>
#endif

/*
explicit QVirtualKeyboardTrace(QObject *parent = nullptr)
*/

/*
~QVirtualKeyboardTrace()
*/
HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_DELETE )
{
  QVirtualKeyboardTrace * obj = (QVirtualKeyboardTrace *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int traceId() const
*/
/*
void setTraceId(int id)
*/

/*
QStringList channels() const
*/
/*
void setChannels(const QStringList &channels)
*/

/*
int length() const
*/

/*
bool isFinal() const
*/
/*
void setFinal(bool final)
*/

/*
bool isCanceled() const
*/
/*
void setCanceled(bool canceled)
*/

/*
qreal opacity() const
*/
/*
void setOpacity(qreal opacity)
*/

/*
Q_INVOKABLE QVariantList points(int pos = 0, int count = -1) const
*/
/*
Q_INVOKABLE int addPoint(const QPointF &point)
*/
/*
Q_INVOKABLE void setChannelData(const QString &channel, int index, const QVariant &data)
*/
/*
Q_INVOKABLE QVariantList channelData(const QString &channel, int pos = 0, int count = -1) const
*/

void QVirtualKeyboardTraceSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONTRACEIDCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "traceIdChanged(int)", "traceIdChanged(int)" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONCHANNELSCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "channelsChanged()", "channelsChanged()" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONLENGTHCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "lengthChanged(int)", "lengthChanged(int)" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONFINALCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "finalChanged(bool)", "finalChanged(bool)" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONCANCELEDCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "canceledChanged(bool)", "canceledChanged(bool)" );
}

HB_FUNC_STATIC( QVIRTUALKEYBOARDTRACE_ONOPACITYCHANGED )
{
  QVirtualKeyboardTraceSlots_connect_signal( "opacityChanged(qreal)", "opacityChanged(qreal)" );
}

#pragma ENDDUMP

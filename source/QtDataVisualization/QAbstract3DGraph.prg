/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QAbstract3DGraph INHERIT QWindow // protected QOpenGLFunctions

   METHOD delete

   METHOD activeInputHandler
   METHOD activeTheme
   METHOD addCustomItem
   METHOD addInputHandler
   METHOD addTheme
   METHOD aspectRatio
   METHOD clearSelection
   METHOD currentFps
   METHOD customItems
   METHOD hasContext
   METHOD horizontalAspectRatio
   METHOD inputHandlers
   METHOD isOrthoProjection
   METHOD isPolar
   METHOD isReflection
   METHOD locale
   METHOD margin
   METHOD measureFps
   METHOD optimizationHints
   METHOD queriedGraphPosition
   METHOD radialLabelOffset
   METHOD reflectivity
   METHOD releaseCustomItem
   METHOD releaseInputHandler
   METHOD releaseTheme
   METHOD removeCustomItem
   METHOD removeCustomItemAt
   METHOD removeCustomItems
   METHOD renderToImage
   METHOD scene
   METHOD selectedAxis
   METHOD selectedCustomItem
   METHOD selectedCustomItemIndex
   METHOD selectedElement
   METHOD selectedLabelIndex
   METHOD selectionMode
   METHOD setActiveInputHandler
   METHOD setActiveTheme
   METHOD setAspectRatio
   METHOD setHorizontalAspectRatio
   METHOD setLocale
   METHOD setMargin
   METHOD setMeasureFps
   METHOD setOptimizationHints
   METHOD setOrthoProjection
   METHOD setPolar
   METHOD setRadialLabelOffset
   METHOD setReflection
   METHOD setReflectivity
   METHOD setSelectionMode
   METHOD setShadowQuality
   METHOD shadowQuality
   METHOD shadowsSupported
   METHOD themes

   METHOD onActiveInputHandlerChanged
   METHOD onActiveThemeChanged
   METHOD onAspectRatioChanged
   METHOD onCurrentFpsChanged
   METHOD onHorizontalAspectRatioChanged
   METHOD onLocaleChanged
   METHOD onMarginChanged
   METHOD onMeasureFpsChanged
   METHOD onOptimizationHintsChanged
   METHOD onOrthoProjectionChanged
   METHOD onPolarChanged
   METHOD onQueriedGraphPositionChanged
   METHOD onRadialLabelOffsetChanged
   METHOD onReflectionChanged
   METHOD onReflectivityChanged
   METHOD onSelectedElementChanged
   METHOD onSelectionModeChanged
   METHOD onShadowQualityChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QAbstract3DGraph
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QAbstract3DGraph>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QAbstract3DGraph>
#endif

#include <QAbstract3DAxis>
#include <QCustom3DItem>

using namespace QtDataVisualization;

/*
explicit QAbstract3DGraph(QAbstract3DGraphPrivate *d, const QSurfaceFormat *format, QWindow *parent = Q_NULLPTR) (protected)
*/

/*
virtual ~QAbstract3DGraph()
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_DELETE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QAbstract3DInputHandler *activeInputHandler() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ACTIVEINPUTHANDLER )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QAbstract3DInputHandler * ptr = obj->activeInputHandler ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QABSTRACT3DINPUTHANDLER" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setActiveInputHandler(QAbstract3DInputHandler *inputHandler)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETACTIVEINPUTHANDLER )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACT3DINPUTHANDLER(1) )
    {
      obj->setActiveInputHandler ( PQABSTRACT3DINPUTHANDLER(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
Q3DTheme *activeTheme() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ACTIVETHEME )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      Q3DTheme * ptr = obj->activeTheme ();
      _qt5xhb_createReturnQObjectClass ( ptr, "Q3DTHEME" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setActiveTheme(Q3DTheme *theme)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETACTIVETHEME )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQ3DTHEME(1) )
    {
      obj->setActiveTheme ( PQ3DTHEME(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
SelectionFlags selectionMode() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTIONMODE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->selectionMode () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setSelectionMode(SelectionFlags mode)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETSELECTIONMODE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setSelectionMode ( (QAbstract3DGraph::SelectionFlags) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
ShadowQuality shadowQuality() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SHADOWQUALITY )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->shadowQuality () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setShadowQuality(ShadowQuality quality)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETSHADOWQUALITY )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setShadowQuality ( (QAbstract3DGraph::ShadowQuality) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
Q3DScene *scene() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SCENE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      Q3DScene * ptr = obj->scene ();
      _qt5xhb_createReturnQObjectClass ( ptr, "Q3DSCENE" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool measureFps() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_MEASUREFPS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->measureFps () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setMeasureFps(bool enable)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETMEASUREFPS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setMeasureFps ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
qreal currentFps() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_CURRENTFPS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->currentFps () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool isOrthoProjection() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ISORTHOPROJECTION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isOrthoProjection () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setOrthoProjection(bool enable)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETORTHOPROJECTION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setOrthoProjection ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
ElementType selectedElement() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTEDELEMENT )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->selectedElement () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
qreal aspectRatio() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ASPECTRATIO )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->aspectRatio () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setAspectRatio(qreal ratio)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETASPECTRATIO )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setAspectRatio ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
OptimizationHints optimizationHints() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_OPTIMIZATIONHINTS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->optimizationHints () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setOptimizationHints(OptimizationHints hints)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETOPTIMIZATIONHINTS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setOptimizationHints ( (QAbstract3DGraph::OptimizationHints) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isPolar() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ISPOLAR )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isPolar () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setPolar(bool enable)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETPOLAR )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setPolar ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
float radialLabelOffset() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_RADIALLABELOFFSET )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RFLOAT( obj->radialLabelOffset () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setRadialLabelOffset(float offset)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETRADIALLABELOFFSET )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setRadialLabelOffset ( PFLOAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
qreal horizontalAspectRatio() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_HORIZONTALASPECTRATIO )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->horizontalAspectRatio () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setHorizontalAspectRatio(qreal ratio)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETHORIZONTALASPECTRATIO )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setHorizontalAspectRatio ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isReflection() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ISREFLECTION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isReflection () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setReflection(bool enable)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETREFLECTION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setReflection ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
qreal reflectivity() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_REFLECTIVITY )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->reflectivity () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setReflectivity(qreal reflectivity)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETREFLECTIVITY )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setReflectivity ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QLocale locale() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_LOCALE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QLocale * ptr = new QLocale( obj->locale () );
      _qt5xhb_createReturnClass ( ptr, "QLOCALE", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setLocale(const QLocale &locale)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETLOCALE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQLOCALE(1) )
    {
      obj->setLocale ( *PQLOCALE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QVector3D queriedGraphPosition() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_QUERIEDGRAPHPOSITION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QVector3D * ptr = new QVector3D( obj->queriedGraphPosition () );
      _qt5xhb_createReturnClass ( ptr, "QVECTOR3D", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
qreal margin() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_MARGIN )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->margin () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setMargin(qreal margin)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SETMARGIN )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setMargin ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void addInputHandler(QAbstract3DInputHandler *inputHandler)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ADDINPUTHANDLER )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACT3DINPUTHANDLER(1) )
    {
      obj->addInputHandler ( PQABSTRACT3DINPUTHANDLER(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void releaseInputHandler(QAbstract3DInputHandler *inputHandler)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_RELEASEINPUTHANDLER )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACT3DINPUTHANDLER(1) )
    {
      obj->releaseInputHandler ( PQABSTRACT3DINPUTHANDLER(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QList<QAbstract3DInputHandler *> inputHandlers() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_INPUTHANDLERS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QAbstract3DInputHandler *> list = obj->inputHandlers ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QABSTRACT3DINPUTHANDLER" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QAbstract3DInputHandler *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QABSTRACT3DINPUTHANDLER", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void addTheme(Q3DTheme *theme)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ADDTHEME )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQ3DTHEME(1) )
    {
      obj->addTheme ( PQ3DTHEME(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void releaseTheme(Q3DTheme *theme)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_RELEASETHEME )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQ3DTHEME(1) )
    {
      obj->releaseTheme ( PQ3DTHEME(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QList<Q3DTheme *> themes() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_THEMES )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<Q3DTheme *> list = obj->themes ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "Q3DTHEME" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (Q3DTheme *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "Q3DTHEME", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
virtual bool shadowsSupported() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SHADOWSSUPPORTED )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->shadowsSupported () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void clearSelection()
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_CLEARSELECTION )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->clearSelection ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int addCustomItem(QCustom3DItem *item)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_ADDCUSTOMITEM )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCUSTOM3DITEM(1) )
    {
      RINT( obj->addCustomItem ( PQCUSTOM3DITEM(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void removeCustomItems()
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_REMOVECUSTOMITEMS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->removeCustomItems ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void removeCustomItem(QCustom3DItem *item)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_REMOVECUSTOMITEM )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCUSTOM3DITEM(1) )
    {
      obj->removeCustomItem ( PQCUSTOM3DITEM(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void removeCustomItemAt(const QVector3D &position)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_REMOVECUSTOMITEMAT )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQVECTOR3D(1) )
    {
      obj->removeCustomItemAt ( *PQVECTOR3D(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void releaseCustomItem(QCustom3DItem *item)
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_RELEASECUSTOMITEM )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCUSTOM3DITEM(1) )
    {
      obj->releaseCustomItem ( PQCUSTOM3DITEM(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QList<QCustom3DItem *> customItems() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_CUSTOMITEMS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QCustom3DItem *> list = obj->customItems ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QCUSTOM3DITEM" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QCustom3DItem *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QCUSTOM3DITEM", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QAbstract3DAxis *selectedAxis() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTEDAXIS )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QAbstract3DAxis * ptr = obj->selectedAxis ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QABSTRACT3DAXIS" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int selectedLabelIndex() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTEDLABELINDEX )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->selectedLabelIndex () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int selectedCustomItemIndex() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTEDCUSTOMITEMINDEX )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->selectedCustomItemIndex () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QCustom3DItem *selectedCustomItem() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_SELECTEDCUSTOMITEM )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QCustom3DItem * ptr = obj->selectedCustomItem ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QCUSTOM3DITEM" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QImage renderToImage(int msaaSamples = 0, const QSize &imageSize = QSize())
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_RENDERTOIMAGE )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(0,2) && ISOPTNUM(1) && (ISQSIZE(2)||ISNIL(2)) )
    {
      QImage * ptr = new QImage( obj->renderToImage ( OPINT(1,0), ISNIL(2)? QSize() : *(QSize *) _qt5xhb_itemGetPtr(2) ) );
      _qt5xhb_createReturnClass ( ptr, "QIMAGE", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool hasContext() const
*/
HB_FUNC_STATIC( QABSTRACT3DGRAPH_HASCONTEXT )
{
  QAbstract3DGraph * obj = (QAbstract3DGraph *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->hasContext () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool event(QEvent *event) (protected)
*/

/*
void resizeEvent(QResizeEvent *event) (protected)
*/

/*
void exposeEvent(QExposeEvent *event) (protected)
*/

/*
void mouseDoubleClickEvent(QMouseEvent *event) (protected)
*/

/*
void touchEvent(QTouchEvent *event) (protected)
*/

/*
void mousePressEvent(QMouseEvent *event) (protected)
*/

/*
void mouseReleaseEvent(QMouseEvent *event) (protected)
*/

/*
void mouseMoveEvent(QMouseEvent *event) (protected)
*/

/*
void wheelEvent(QWheelEvent *event) (protected)
*/

void QAbstract3DGraphSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONACTIVEINPUTHANDLERCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "activeInputHandlerChanged(QAbstract3DInputHandler*)", "activeInputHandlerChanged(QAbstract3DInputHandler*)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONACTIVETHEMECHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "activeThemeChanged(Q3DTheme*)", "activeThemeChanged(Q3DTheme*)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONASPECTRATIOCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "aspectRatioChanged(qreal)", "aspectRatioChanged(qreal)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONCURRENTFPSCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "currentFpsChanged(qreal)", "currentFpsChanged(qreal)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONHORIZONTALASPECTRATIOCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "horizontalAspectRatioChanged(qreal)", "horizontalAspectRatioChanged(qreal)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONLOCALECHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "localeChanged(QLocale)", "localeChanged(QLocale)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONMARGINCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "marginChanged(qreal)", "marginChanged(qreal)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONMEASUREFPSCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "measureFpsChanged(bool)", "measureFpsChanged(bool)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONOPTIMIZATIONHINTSCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)", "optimizationHintsChanged(QAbstract3DGraph::OptimizationHints)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONORTHOPROJECTIONCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "orthoProjectionChanged(bool)", "orthoProjectionChanged(bool)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONPOLARCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "polarChanged(bool)", "polarChanged(bool)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONQUERIEDGRAPHPOSITIONCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "queriedGraphPositionChanged(QVector3D)", "queriedGraphPositionChanged(QVector3D)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONRADIALLABELOFFSETCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "radialLabelOffsetChanged(float)", "radialLabelOffsetChanged(float)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONREFLECTIONCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "reflectionChanged(bool)", "reflectionChanged(bool)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONREFLECTIVITYCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "reflectivityChanged(qreal)", "reflectivityChanged(qreal)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONSELECTEDELEMENTCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "selectedElementChanged(QAbstract3DGraph::ElementType)", "selectedElementChanged(QAbstract3DGraph::ElementType)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONSELECTIONMODECHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "selectionModeChanged(QAbstract3DGraph::SelectionFlags)", "selectionModeChanged(QAbstract3DGraph::SelectionFlags)" );
}

HB_FUNC_STATIC( QABSTRACT3DGRAPH_ONSHADOWQUALITYCHANGED )
{
  QAbstract3DGraphSlots_connect_signal( "shadowQualityChanged(QAbstract3DGraph::ShadowQuality)", "shadowQualityChanged(QAbstract3DGraph::ShadowQuality)" );
}

#pragma ENDDUMP

/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS Q3DBars INHERIT QAbstract3DGraph

   METHOD new
   METHOD delete

   METHOD addAxis
   METHOD addSeries
   METHOD axes
   METHOD barSpacing
   METHOD barThickness
   METHOD columnAxis
   METHOD floorLevel
   METHOD insertSeries
   METHOD isBarSpacingRelative
   METHOD isMultiSeriesUniform
   METHOD primarySeries
   METHOD releaseAxis
   METHOD removeSeries
   METHOD rowAxis
   METHOD selectedSeries
   METHOD seriesList
   METHOD setBarSpacing
   METHOD setBarSpacingRelative
   METHOD setBarThickness
   METHOD setColumnAxis
   METHOD setFloorLevel
   METHOD setMultiSeriesUniform
   METHOD setPrimarySeries
   METHOD setRowAxis
   METHOD setValueAxis
   METHOD valueAxis

   METHOD onBarSpacingChanged
   METHOD onBarSpacingRelativeChanged
   METHOD onBarThicknessChanged
   METHOD onColumnAxisChanged
   METHOD onFloorLevelChanged
   METHOD onMultiSeriesUniformChanged
   METHOD onPrimarySeriesChanged
   METHOD onRowAxisChanged
   METHOD onSelectedSeriesChanged
   METHOD onValueAxisChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS Q3DBars
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <Q3DBars>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <Q3DBars>
#endif

using namespace QtDataVisualization;

/*
explicit Q3DBars(const QSurfaceFormat *format = Q_NULLPTR, QWindow *parent = Q_NULLPTR)
*/
HB_FUNC_STATIC( Q3DBARS_NEW )
{
  if( ISBETWEEN(0,2) && (ISQSURFACEFORMAT(1)||ISNIL(1)) && (ISQWINDOW(2)||ISNIL(2)) )
  {
    Q3DBars * o = new Q3DBars ( ISNIL(1)? Q_NULLPTR : (QSurfaceFormat *) _qt5xhb_itemGetPtr(1), OPQWINDOW(2,Q_NULLPTR) );
    _qt5xhb_returnNewObject( o, false );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
virtual ~Q3DBars()
*/
HB_FUNC_STATIC( Q3DBARS_DELETE )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isMultiSeriesUniform() const
*/
HB_FUNC_STATIC( Q3DBARS_ISMULTISERIESUNIFORM )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isMultiSeriesUniform () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setMultiSeriesUniform(bool uniform)
*/
HB_FUNC_STATIC( Q3DBARS_SETMULTISERIESUNIFORM )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setMultiSeriesUniform ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
float barThickness() const
*/
HB_FUNC_STATIC( Q3DBARS_BARTHICKNESS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RFLOAT( obj->barThickness () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBarThickness(float thicknessRatio)
*/
HB_FUNC_STATIC( Q3DBARS_SETBARTHICKNESS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setBarThickness ( PFLOAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QSizeF barSpacing() const
*/
HB_FUNC_STATIC( Q3DBARS_BARSPACING )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QSizeF * ptr = new QSizeF( obj->barSpacing () );
      _qt5xhb_createReturnClass ( ptr, "QSIZEF", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBarSpacing(const QSizeF &spacing)
*/
HB_FUNC_STATIC( Q3DBARS_SETBARSPACING )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQSIZEF(1) )
    {
      obj->setBarSpacing ( *PQSIZEF(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isBarSpacingRelative() const
*/
HB_FUNC_STATIC( Q3DBARS_ISBARSPACINGRELATIVE )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isBarSpacingRelative () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBarSpacingRelative(bool relative)
*/
HB_FUNC_STATIC( Q3DBARS_SETBARSPACINGRELATIVE )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setBarSpacingRelative ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QCategory3DAxis *rowAxis() const
*/
HB_FUNC_STATIC( Q3DBARS_ROWAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QCategory3DAxis * ptr = obj->rowAxis ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QCATEGORY3DAXIS" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setRowAxis(QCategory3DAxis *axis)
*/
HB_FUNC_STATIC( Q3DBARS_SETROWAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCATEGORY3DAXIS(1) )
    {
      obj->setRowAxis ( PQCATEGORY3DAXIS(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QCategory3DAxis *columnAxis() const
*/
HB_FUNC_STATIC( Q3DBARS_COLUMNAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QCategory3DAxis * ptr = obj->columnAxis ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QCATEGORY3DAXIS" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setColumnAxis(QCategory3DAxis *axis)
*/
HB_FUNC_STATIC( Q3DBARS_SETCOLUMNAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCATEGORY3DAXIS(1) )
    {
      obj->setColumnAxis ( PQCATEGORY3DAXIS(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QValue3DAxis *valueAxis() const
*/
HB_FUNC_STATIC( Q3DBARS_VALUEAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QValue3DAxis * ptr = obj->valueAxis ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QVALUE3DAXIS" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setValueAxis(QValue3DAxis *axis)
*/
HB_FUNC_STATIC( Q3DBARS_SETVALUEAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQVALUE3DAXIS(1) )
    {
      obj->setValueAxis ( PQVALUE3DAXIS(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QBar3DSeries *primarySeries() const
*/
HB_FUNC_STATIC( Q3DBARS_PRIMARYSERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QBar3DSeries * ptr = obj->primarySeries ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QBAR3DSERIES" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setPrimarySeries(QBar3DSeries *series)
*/
HB_FUNC_STATIC( Q3DBARS_SETPRIMARYSERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBAR3DSERIES(1) )
    {
      obj->setPrimarySeries ( PQBAR3DSERIES(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QBar3DSeries *selectedSeries() const
*/
HB_FUNC_STATIC( Q3DBARS_SELECTEDSERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QBar3DSeries * ptr = obj->selectedSeries ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QBAR3DSERIES" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
float floorLevel() const
*/
HB_FUNC_STATIC( Q3DBARS_FLOORLEVEL )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RFLOAT( obj->floorLevel () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setFloorLevel(float level)
*/
HB_FUNC_STATIC( Q3DBARS_SETFLOORLEVEL )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setFloorLevel ( PFLOAT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void addSeries(QBar3DSeries *series)
*/
HB_FUNC_STATIC( Q3DBARS_ADDSERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBAR3DSERIES(1) )
    {
      obj->addSeries ( PQBAR3DSERIES(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void removeSeries(QBar3DSeries *series)
*/
HB_FUNC_STATIC( Q3DBARS_REMOVESERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBAR3DSERIES(1) )
    {
      obj->removeSeries ( PQBAR3DSERIES(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void insertSeries(int index, QBar3DSeries *series)
*/
HB_FUNC_STATIC( Q3DBARS_INSERTSERIES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISQBAR3DSERIES(2) )
    {
      obj->insertSeries ( PINT(1), PQBAR3DSERIES(2) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QList<QBar3DSeries *> seriesList() const
*/
HB_FUNC_STATIC( Q3DBARS_SERIESLIST )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QBar3DSeries *> list = obj->seriesList ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QBAR3DSERIES" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QBar3DSeries *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QBAR3DSERIES", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void addAxis(QAbstract3DAxis *axis)
*/
HB_FUNC_STATIC( Q3DBARS_ADDAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACT3DAXIS(1) )
    {
      obj->addAxis ( PQABSTRACT3DAXIS(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void releaseAxis(QAbstract3DAxis *axis)
*/
HB_FUNC_STATIC( Q3DBARS_RELEASEAXIS )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQABSTRACT3DAXIS(1) )
    {
      obj->releaseAxis ( PQABSTRACT3DAXIS(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QList<QAbstract3DAxis *> axes() const
*/
HB_FUNC_STATIC( Q3DBARS_AXES )
{
  Q3DBars * obj = (Q3DBars *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QAbstract3DAxis *> list = obj->axes ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QABSTRACT3DAXIS" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QAbstract3DAxis *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QABSTRACT3DAXIS", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

void Q3DBarsSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( Q3DBARS_ONBARSPACINGCHANGED )
{
  Q3DBarsSlots_connect_signal( "barSpacingChanged(QSizeF)", "barSpacingChanged(QSizeF)" );
}

HB_FUNC_STATIC( Q3DBARS_ONBARSPACINGRELATIVECHANGED )
{
  Q3DBarsSlots_connect_signal( "barSpacingRelativeChanged(bool)", "barSpacingRelativeChanged(bool)" );
}

HB_FUNC_STATIC( Q3DBARS_ONBARTHICKNESSCHANGED )
{
  Q3DBarsSlots_connect_signal( "barThicknessChanged(float)", "barThicknessChanged(float)" );
}

HB_FUNC_STATIC( Q3DBARS_ONCOLUMNAXISCHANGED )
{
  Q3DBarsSlots_connect_signal( "columnAxisChanged(QCategory3DAxis*)", "columnAxisChanged(QCategory3DAxis*)" );
}

HB_FUNC_STATIC( Q3DBARS_ONFLOORLEVELCHANGED )
{
  Q3DBarsSlots_connect_signal( "floorLevelChanged(float)", "floorLevelChanged(float)" );
}

HB_FUNC_STATIC( Q3DBARS_ONMULTISERIESUNIFORMCHANGED )
{
  Q3DBarsSlots_connect_signal( "multiSeriesUniformChanged(bool)", "multiSeriesUniformChanged(bool)" );
}

HB_FUNC_STATIC( Q3DBARS_ONPRIMARYSERIESCHANGED )
{
  Q3DBarsSlots_connect_signal( "primarySeriesChanged(QBar3DSeries*)", "primarySeriesChanged(QBar3DSeries*)" );
}

HB_FUNC_STATIC( Q3DBARS_ONROWAXISCHANGED )
{
  Q3DBarsSlots_connect_signal( "rowAxisChanged(QCategory3DAxis*)", "rowAxisChanged(QCategory3DAxis*)" );
}

HB_FUNC_STATIC( Q3DBARS_ONSELECTEDSERIESCHANGED )
{
  Q3DBarsSlots_connect_signal( "selectedSeriesChanged(QBar3DSeries*)", "selectedSeriesChanged(QBar3DSeries*)" );
}

HB_FUNC_STATIC( Q3DBARS_ONVALUEAXISCHANGED )
{
  Q3DBarsSlots_connect_signal( "valueAxisChanged(QValue3DAxis*)", "valueAxisChanged(QValue3DAxis*)" );
}

#pragma ENDDUMP

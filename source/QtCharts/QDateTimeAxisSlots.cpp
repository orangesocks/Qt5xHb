/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2019 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QDateTimeAxisSlots.h"

QDateTimeAxisSlots::QDateTimeAxisSlots(QObject *parent) : QObject(parent)
{
}

QDateTimeAxisSlots::~QDateTimeAxisSlots()
{
}
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::formatChanged( QString format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "formatChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QDATETIMEAXIS" );
    PHB_ITEM pformat = hb_itemPutC( NULL, (const char *) format.toLatin1().data() );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::maxChanged( QDateTime max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "maxChanged(QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QDATETIMEAXIS" );
    PHB_ITEM pmax = Signals_return_object( (void *) &max, "QDATETIME" );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmax );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::minChanged( QDateTime min )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "minChanged(QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QDATETIMEAXIS" );
    PHB_ITEM pmin = Signals_return_object( (void *) &min, "QDATETIME" );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pmin );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::rangeChanged( QDateTime min, QDateTime max )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rangeChanged(QDateTime,QDateTime)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QDATETIMEAXIS" );
    PHB_ITEM pmin = Signals_return_object( (void *) &min, "QDATETIME" );
    PHB_ITEM pmax = Signals_return_object( (void *) &max, "QDATETIME" );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pmin, pmax );
    hb_itemRelease( psender );
    hb_itemRelease( pmin );
    hb_itemRelease( pmax );
  }
}
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
void QDateTimeAxisSlots::tickCountChanged( int tick )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "tickCountChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = Signals_return_qobject ( (QObject *) object, "QDATETIMEAXIS" );
    PHB_ITEM ptick = hb_itemPutNI( NULL, tick );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, ptick );
    hb_itemRelease( psender );
    hb_itemRelease( ptick );
  }
}
#endif

void QDateTimeAxisSlots_connect_signal ( const QString & signal, const QString & slot )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  QDateTimeAxis * obj = (QDateTimeAxis *) hb_itemGetPtr( hb_objSendMsg( hb_stackSelfItem(), "POINTER", 0 ) );

  if( obj )
  {
    QDateTimeAxisSlots * s = QCoreApplication::instance()->findChild<QDateTimeAxisSlots *>();

    if( s == NULL )
    {
      s = new QDateTimeAxisSlots();
      s->moveToThread( QCoreApplication::instance()->thread() );
      s->setParent( QCoreApplication::instance() );
    }

    hb_retl( Signals_connection_disconnection( s, signal, slot ) );
  }
  else
  {
    hb_retl( false );
  }
#else
  hb_retl( false );
#endif
}

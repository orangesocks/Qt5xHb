/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QCandlestickSeries INHERIT QAbstractSeries

   METHOD new
   METHOD delete

   METHOD append
   METHOD bodyOutlineVisible
   METHOD bodyWidth
   METHOD brush
   METHOD capsVisible
   METHOD capsWidth
   METHOD clear
   METHOD count
   METHOD decreasingColor
   METHOD increasingColor
   METHOD insert
   METHOD maximumColumnWidth
   METHOD minimumColumnWidth
   METHOD pen
   METHOD remove
   METHOD setBodyOutlineVisible
   METHOD setBodyWidth
   METHOD setBrush
   METHOD setCapsVisible
   METHOD setCapsWidth
   METHOD setDecreasingColor
   METHOD setIncreasingColor
   METHOD setMaximumColumnWidth
   METHOD setMinimumColumnWidth
   METHOD setPen
   METHOD sets
   METHOD take
   METHOD type

   METHOD onBodyOutlineVisibilityChanged
   METHOD onBodyWidthChanged
   METHOD onBrushChanged
   METHOD onCandlestickSetsAdded
   METHOD onCandlestickSetsRemoved
   METHOD onCapsVisibilityChanged
   METHOD onCapsWidthChanged
   METHOD onClicked
   METHOD onCountChanged
   METHOD onDecreasingColorChanged
   METHOD onDoubleClicked
   METHOD onHovered
   METHOD onIncreasingColorChanged
   METHOD onMaximumColumnWidthChanged
   METHOD onMinimumColumnWidthChanged
   METHOD onPenChanged
   METHOD onPressed
   METHOD onReleased

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QCandlestickSeries
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QCandlestickSeries>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QCandlestickSeries>
#endif
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
using namespace QtCharts;
#endif

/*
explicit QCandlestickSeries(QObject *parent = nullptr)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_NEW )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  if( ISBETWEEN(0,1) && (ISQOBJECT(1)||ISNIL(1)) )
  {
    QCandlestickSeries * o = new QCandlestickSeries ( OPQOBJECT(1,nullptr) );
    _qt5xhb_returnNewObject( o, false );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
#endif
}

/*
~QCandlestickSeries()
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_DELETE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
int count() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_COUNT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->count () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
qreal maximumColumnWidth() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_MAXIMUMCOLUMNWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->maximumColumnWidth () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setMaximumColumnWidth(qreal maximumColumnWidth)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETMAXIMUMCOLUMNWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setMaximumColumnWidth ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
qreal minimumColumnWidth() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_MINIMUMCOLUMNWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->minimumColumnWidth () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setMinimumColumnWidth(qreal minimumColumnWidth)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETMINIMUMCOLUMNWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setMinimumColumnWidth ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
qreal bodyWidth() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_BODYWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->bodyWidth () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setBodyWidth(qreal bodyWidth)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETBODYWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setBodyWidth ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool bodyOutlineVisible() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_BODYOUTLINEVISIBLE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->bodyOutlineVisible () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setBodyOutlineVisible(bool bodyOutlineVisible)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETBODYOUTLINEVISIBLE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setBodyOutlineVisible ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
qreal capsWidth() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_CAPSWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->capsWidth () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setCapsWidth(qreal capsWidth)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETCAPSWIDTH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setCapsWidth ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool capsVisible() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_CAPSVISIBLE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->capsVisible () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setCapsVisible(bool capsVisible)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETCAPSVISIBLE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setCapsVisible ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QColor increasingColor() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_INCREASINGCOLOR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QColor * ptr = new QColor( obj->increasingColor () );
      _qt5xhb_createReturnClass ( ptr, "QCOLOR", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setIncreasingColor(const QColor &increasingColor)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETINCREASINGCOLOR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && (ISQCOLOR(1)||ISCHAR(1)) )
    {
      obj->setIncreasingColor ( ISOBJECT(1)? *(QColor *) _qt5xhb_itemGetPtr(1) : QColor(hb_parc(1)) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QColor decreasingColor() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_DECREASINGCOLOR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QColor * ptr = new QColor( obj->decreasingColor () );
      _qt5xhb_createReturnClass ( ptr, "QCOLOR", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setDecreasingColor(const QColor &decreasingColor)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETDECREASINGCOLOR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && (ISQCOLOR(1)||ISCHAR(1)) )
    {
      obj->setDecreasingColor ( ISOBJECT(1)? *(QColor *) _qt5xhb_itemGetPtr(1) : QColor(hb_parc(1)) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QBrush brush() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_BRUSH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QBrush * ptr = new QBrush( obj->brush () );
      _qt5xhb_createReturnClass ( ptr, "QBRUSH", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setBrush(const QBrush &brush)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETBRUSH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBRUSH(1) )
    {
      obj->setBrush ( *PQBRUSH(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QPen pen() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_PEN )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QPen * ptr = new QPen( obj->pen () );
      _qt5xhb_createReturnClass ( ptr, "QPEN", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setPen(const QPen &pen)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETPEN )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQPEN(1) )
    {
      obj->setPen ( *PQPEN(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool append(QCandlestickSet *set)
*/
void QCandlestickSeries_append1 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
       QList<QCandlestickSet *> par1;
PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
int i1;
int nLen1 = hb_arrayLen(aList1);
for (i1=0;i1<nLen1;i1++)
{
  par1 << (QCandlestickSet *) hb_itemGetPtr( hb_objSendMsg( hb_arrayGetItemPtr( aList1, i1+1 ), "POINTER", 0 ) );
}
      RBOOL( obj->append ( par1 ) );
  }
#endif
}

/*
bool append(const QList<QCandlestickSet *> &sets)
*/
void QCandlestickSeries_append2 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
       QList<QCandlestickSet *> par1;
PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
int i1;
int nLen1 = hb_arrayLen(aList1);
for (i1=0;i1<nLen1;i1++)
{
  par1 << (QCandlestickSet *) hb_itemGetPtr( hb_objSendMsg( hb_arrayGetItemPtr( aList1, i1+1 ), "POINTER", 0 ) );
}
      RBOOL( obj->append ( par1 ) );
  }
#endif
}

//[1]bool append(QCandlestickSet *set)
//[2]bool append(const QList<QCandlestickSet *> &sets)

HB_FUNC_STATIC( QCANDLESTICKSERIES_APPEND )
{
  if( ISNUMPAR(1) && ISQCANDLESTICKSET(1) )
  {
    QCandlestickSeries_append1();
  }
  else if( ISNUMPAR(1) && ISARRAY(1) )
  {
    QCandlestickSeries_append2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool remove(QCandlestickSet *set)
*/
void QCandlestickSeries_remove1 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
      RBOOL( obj->remove ( PQCANDLESTICKSET(1) ) );
  }
#endif
}

/*
bool remove(const QList<QCandlestickSet *> &sets)
*/
void QCandlestickSeries_remove2 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
       QList<QCandlestickSet *> par1;
PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
int i1;
int nLen1 = hb_arrayLen(aList1);
for (i1=0;i1<nLen1;i1++)
{
  par1 << (QCandlestickSet *) hb_itemGetPtr( hb_objSendMsg( hb_arrayGetItemPtr( aList1, i1+1 ), "POINTER", 0 ) );
}
      RBOOL( obj->remove ( par1 ) );
  }
#endif
}

//[1]bool remove(QCandlestickSet *set)
//[2]bool remove(const QList<QCandlestickSet *> &sets)

HB_FUNC_STATIC( QCANDLESTICKSERIES_REMOVE )
{
  if( ISNUMPAR(1) && ISQCANDLESTICKSET(1) )
  {
    QCandlestickSeries_remove1();
  }
  else if( ISNUMPAR(1) && ISARRAY(1) )
  {
    QCandlestickSeries_remove2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool insert(int index, QCandlestickSet *set)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_INSERT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISQCANDLESTICKSET(2) )
    {
      RBOOL( obj->insert ( PINT(1), PQCANDLESTICKSET(2) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
bool take(QCandlestickSet *set)
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_TAKE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQCANDLESTICKSET(1) )
    {
      RBOOL( obj->take ( PQCANDLESTICKSET(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void clear()
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_CLEAR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->clear ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QList<QCandlestickSet *> sets() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_SETS )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QList<QCandlestickSet *> list = obj->sets ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QCANDLESTICKSET" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QCandlestickSet *) list[i] );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QCANDLESTICKSET", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
QAbstractSeries::SeriesType type() const
*/
HB_FUNC_STATIC( QCANDLESTICKSERIES_TYPE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeries * obj = (QCandlestickSeries *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->type () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

void QCandlestickSeriesSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONBODYOUTLINEVISIBILITYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "bodyOutlineVisibilityChanged()", "bodyOutlineVisibilityChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONBODYWIDTHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "bodyWidthChanged()", "bodyWidthChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONBRUSHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "brushChanged()", "brushChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCANDLESTICKSETSADDED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "candlestickSetsAdded(QList<QCandlestickSet*>)", "candlestickSetsAdded(QList<QCandlestickSet*>)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCANDLESTICKSETSREMOVED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "candlestickSetsRemoved(QList<QCandlestickSet*>)", "candlestickSetsRemoved(QList<QCandlestickSet*>)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCAPSVISIBILITYCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "capsVisibilityChanged()", "capsVisibilityChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCAPSWIDTHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "capsWidthChanged()", "capsWidthChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "clicked(QCandlestickSet*)", "clicked(QCandlestickSet*)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONCOUNTCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "countChanged()", "countChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONDECREASINGCOLORCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "decreasingColorChanged()", "decreasingColorChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONDOUBLECLICKED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "doubleClicked(QCandlestickSet*)", "doubleClicked(QCandlestickSet*)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONHOVERED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "hovered(bool,QCandlestickSet*)", "hovered(bool,QCandlestickSet*)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONINCREASINGCOLORCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "increasingColorChanged()", "increasingColorChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONMAXIMUMCOLUMNWIDTHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "maximumColumnWidthChanged()", "maximumColumnWidthChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONMINIMUMCOLUMNWIDTHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "minimumColumnWidthChanged()", "minimumColumnWidthChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONPENCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "penChanged()", "penChanged()" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONPRESSED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "pressed(QCandlestickSet*)", "pressed(QCandlestickSet*)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QCANDLESTICKSERIES_ONRELEASED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QCandlestickSeriesSlots_connect_signal( "released(QCandlestickSet*)", "released(QCandlestickSet*)" );
#else
  hb_retl( false );
#endif
}

#pragma ENDDUMP

/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QQuickWebEngineProfile INHERIT QObject

   METHOD new
   METHOD delete

   METHOD cachePath
   METHOD clearHttpCache
   METHOD cookieStore
   METHOD defaultProfile
   METHOD httpAcceptLanguage
   METHOD httpCacheMaximumSize
   METHOD httpCacheType
   METHOD httpUserAgent
   METHOD installUrlSchemeHandler
   METHOD isOffTheRecord
   METHOD isSpellCheckEnabled
   METHOD persistentCookiesPolicy
   METHOD persistentStoragePath
   METHOD removeAllUrlSchemeHandlers
   METHOD removeUrlScheme
   METHOD removeUrlSchemeHandler
   METHOD setCachePath
   METHOD setHttpAcceptLanguage
   METHOD setHttpCacheMaximumSize
   METHOD setHttpCacheType
   METHOD setHttpUserAgent
   METHOD setOffTheRecord
   METHOD setPersistentCookiesPolicy
   METHOD setPersistentStoragePath
   METHOD setRequestInterceptor
   METHOD setSpellCheckEnabled
   METHOD setSpellCheckLanguages
   METHOD setStorageName
   METHOD spellCheckLanguages
   METHOD storageName
   METHOD urlSchemeHandler

   METHOD onCachePathChanged
   METHOD onHttpAcceptLanguageChanged
   METHOD onHttpCacheMaximumSizeChanged
   METHOD onHttpCacheTypeChanged
   METHOD onHttpUserAgentChanged
   METHOD onOffTheRecordChanged
   METHOD onPersistentCookiesPolicyChanged
   METHOD onPersistentStoragePathChanged
   METHOD onSpellCheckEnabledChanged
   METHOD onSpellCheckLanguagesChanged
   METHOD onStorageNameChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QQuickWebEngineProfile
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
#include <QQuickWebEngineProfile>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
#include <QQuickWebEngineProfile>
#endif
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
#include <QWebEngineCookieStore>
#endif
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
#include <QWebEngineUrlSchemeHandler>
#endif

/*
QQuickWebEngineProfile(QObject *parent = Q_NULLPTR)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_NEW )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  if( ISBETWEEN(0,1) && (ISQOBJECT(1)||ISNIL(1)) )
  {
    QQuickWebEngineProfile * o = new QQuickWebEngineProfile ( OPQOBJECT(1,Q_NULLPTR) );
    _qt5xhb_returnNewObject( o, false );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
#endif
}

/*
QQuickWebEngineProfile(QQuickWebEngineProfilePrivate *, QObject *parent = Q_NULLPTR) (private)
*/

/*
~QQuickWebEngineProfile()
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_DELETE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString storageName() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_STORAGENAME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->storageName () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setStorageName(const QString &name)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETSTORAGENAME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setStorageName ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool isOffTheRecord() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ISOFFTHERECORD )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isOffTheRecord () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setOffTheRecord(bool offTheRecord)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETOFFTHERECORD )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setOffTheRecord ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString persistentStoragePath() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_PERSISTENTSTORAGEPATH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->persistentStoragePath () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setPersistentStoragePath(const QString &path)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETPERSISTENTSTORAGEPATH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setPersistentStoragePath ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString cachePath() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_CACHEPATH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->cachePath () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setCachePath(const QString &path)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETCACHEPATH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setCachePath ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString httpUserAgent() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_HTTPUSERAGENT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->httpUserAgent () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setHttpUserAgent(const QString &userAgent)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETHTTPUSERAGENT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setHttpUserAgent ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
HttpCacheType httpCacheType() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_HTTPCACHETYPE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->httpCacheType () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setHttpCacheType(QQuickWebEngineProfile::HttpCacheType)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETHTTPCACHETYPE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setHttpCacheType ( (QQuickWebEngineProfile::HttpCacheType) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QString httpAcceptLanguage() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_HTTPACCEPTLANGUAGE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->httpAcceptLanguage () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setHttpAcceptLanguage(const QString &httpAcceptLanguage)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETHTTPACCEPTLANGUAGE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setHttpAcceptLanguage ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
PersistentCookiesPolicy persistentCookiesPolicy() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_PERSISTENTCOOKIESPOLICY )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->persistentCookiesPolicy () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setPersistentCookiesPolicy(QQuickWebEngineProfile::PersistentCookiesPolicy)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETPERSISTENTCOOKIESPOLICY )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setPersistentCookiesPolicy ( (QQuickWebEngineProfile::PersistentCookiesPolicy) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
int httpCacheMaximumSize() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_HTTPCACHEMAXIMUMSIZE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->httpCacheMaximumSize () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setHttpCacheMaximumSize(int maxSize)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETHTTPCACHEMAXIMUMSIZE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setHttpCacheMaximumSize ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QStringList spellCheckLanguages() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SPELLCHECKLANGUAGES )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRINGLIST( obj->spellCheckLanguages () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setSpellCheckLanguages(const QStringList &languages)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETSPELLCHECKLANGUAGES )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISARRAY(1) )
    {
      obj->setSpellCheckLanguages ( PQSTRINGLIST(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
bool isSpellCheckEnabled() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ISSPELLCHECKENABLED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isSpellCheckEnabled () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setSpellCheckEnabled(bool enabled)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETSPELLCHECKENABLED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setSpellCheckEnabled ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QQmlListProperty<QQuickWebEngineScript> userScripts()
*/

/*
QWebEngineCookieStore *cookieStore() const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_COOKIESTORE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QWebEngineCookieStore * ptr = obj->cookieStore ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QWEBENGINECOOKIESTORE" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setRequestInterceptor(QWebEngineUrlRequestInterceptor *interceptor)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_SETREQUESTINTERCEPTOR )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQWEBENGINEURLREQUESTINTERCEPTOR(1) )
    {
      obj->setRequestInterceptor ( PQWEBENGINEURLREQUESTINTERCEPTOR(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
const QWebEngineUrlSchemeHandler *urlSchemeHandler(const QByteArray &) const
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_URLSCHEMEHANDLER )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBYTEARRAY(1) )
    {
      const QWebEngineUrlSchemeHandler * ptr = obj->urlSchemeHandler ( *PQBYTEARRAY(1) );
      _qt5xhb_createReturnQObjectClass ( ptr, "QWEBENGINEURLSCHEMEHANDLER" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void installUrlSchemeHandler(const QByteArray &scheme, QWebEngineUrlSchemeHandler *)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_INSTALLURLSCHEMEHANDLER )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISQBYTEARRAY(1) && ISQWEBENGINEURLSCHEMEHANDLER(2) )
    {
      obj->installUrlSchemeHandler ( *PQBYTEARRAY(1), PQWEBENGINEURLSCHEMEHANDLER(2) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void removeUrlScheme(const QByteArray &scheme)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_REMOVEURLSCHEME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQBYTEARRAY(1) )
    {
      obj->removeUrlScheme ( *PQBYTEARRAY(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *)
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_REMOVEURLSCHEMEHANDLER )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQWEBENGINEURLSCHEMEHANDLER(1) )
    {
      obj->removeUrlSchemeHandler ( PQWEBENGINEURLSCHEMEHANDLER(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void removeAllUrlSchemeHandlers()
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_REMOVEALLURLSCHEMEHANDLERS )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->removeAllUrlSchemeHandlers ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
Q_REVISION(2) Q_INVOKABLE void clearHttpCache()
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_CLEARHTTPCACHE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,7,0))
  QQuickWebEngineProfile * obj = (QQuickWebEngineProfile *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->clearHttpCache ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
static QQuickWebEngineProfile *defaultProfile()
*/
HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_DEFAULTPROFILE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
    if( ISNUMPAR(0) )
  {
      QQuickWebEngineProfile * ptr = QQuickWebEngineProfile::defaultProfile ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QQUICKWEBENGINEPROFILE" );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
#endif
}

/*
void destroyedUrlSchemeHandler(QWebEngineUrlSchemeHandler *obj) (slot) (private)
*/

/*
QQuickWebEngineSettings *settings() const (private)
*/

void QQuickWebEngineProfileSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONCACHEPATHCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "cachePathChanged()", "cachePathChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONHTTPACCEPTLANGUAGECHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "httpAcceptLanguageChanged()", "httpAcceptLanguageChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONHTTPCACHEMAXIMUMSIZECHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "httpCacheMaximumSizeChanged()", "httpCacheMaximumSizeChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONHTTPCACHETYPECHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "httpCacheTypeChanged()", "httpCacheTypeChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONHTTPUSERAGENTCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "httpUserAgentChanged()", "httpUserAgentChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONOFFTHERECORDCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "offTheRecordChanged()", "offTheRecordChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONPERSISTENTCOOKIESPOLICYCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "persistentCookiesPolicyChanged()", "persistentCookiesPolicyChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONPERSISTENTSTORAGEPATHCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "persistentStoragePathChanged()", "persistentStoragePathChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONSPELLCHECKENABLEDCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "spellCheckEnabledChanged()", "spellCheckEnabledChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONSPELLCHECKLANGUAGESCHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "spellCheckLanguagesChanged()", "spellCheckLanguagesChanged()" );
}

HB_FUNC_STATIC( QQUICKWEBENGINEPROFILE_ONSTORAGENAMECHANGED )
{
  QQuickWebEngineProfileSlots_connect_signal( "storageNameChanged()", "storageNameChanged()" );
}

#pragma ENDDUMP

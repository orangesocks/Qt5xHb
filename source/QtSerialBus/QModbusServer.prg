/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2019 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QModbusServer INHERIT QModbusDevice

   METHOD delete

   METHOD onDataWritten

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QModbusServer
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QtSerialBus/QModbusServer>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QtSerialBus/QModbusServer>
#endif
#endif

/*
explicit QModbusServer(QObject *parent = nullptr)
*/
/*
QModbusServer(QModbusServerPrivate &dd, QObject *parent = nullptr) [protected]
*/

/*
~QModbusServer()
*/
HB_FUNC_STATIC( QMODBUSSERVER_DELETE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QModbusServer * obj = (QModbusServer *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
int serverAddress() const
*/

/*
void setServerAddress(int serverAddress)
*/

/*
virtual bool setMap(const QModbusDataUnitMap &map)
*/

/*
virtual bool processesBroadcast() const
*/

/*
virtual QVariant value(int option) const
*/

/*
virtual bool setValue(int option, const QVariant &value)
*/

/*
bool data(QModbusDataUnit *newData) const
*/

/*
bool setData(const QModbusDataUnit &unit)
*/

/*
bool setData(QModbusDataUnit::RegisterType table, quint16 address, quint16 data)
*/

/*
bool data(QModbusDataUnit::RegisterType table, quint16 address, quint16 *data) const
*/

/*
virtual bool writeData(const QModbusDataUnit &unit) [protected]
*/

/*
virtual bool readData(QModbusDataUnit *newData) const [protected]
*/

/*
virtual QModbusResponse processRequest(const QModbusPdu &request) [protected]
*/

/*
virtual QModbusResponse processPrivateRequest(const QModbusPdu &request) [protected]
*/

void QModbusServerSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QMODBUSSERVER_ONDATAWRITTEN )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QModbusServerSlots_connect_signal( "dataWritten(QModbusDataUnit::RegisterType,int,int)", "dataWritten(QModbusDataUnit::RegisterType,int,int)" );
#else
  hb_retl( false );
#endif
}

#pragma ENDDUMP

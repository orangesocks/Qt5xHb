/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2019 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QModbusDevice INHERIT QObject

   METHOD delete

   METHOD onErrorOccurred
   METHOD onStateChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QModbusDevice
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QtSerialBus/QModbusDevice>
#endif
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
#include <QtSerialBus/QModbusDevice>
#endif
#endif

/*
explicit QModbusDevice(QObject *parent = nullptr)
*/
/*
QModbusDevice(QModbusDevicePrivate &dd, QObject *parent = nullptr) [protected]
*/

/*
~QModbusDevice()
*/
HB_FUNC_STATIC( QMODBUSDEVICE_DELETE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QModbusDevice * obj = (QModbusDevice *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QVariant connectionParameter(int parameter) const
*/

/*
void setConnectionParameter(int parameter, const QVariant &value)
*/

/*
bool connectDevice()
*/

/*
void disconnectDevice()
*/

/*
State state() const
*/

/*
Error error() const
*/

/*
QString errorString() const
*/

/*
void setState(QModbusDevice::State newState) [protected]
*/

/*
void setError(const QString &errorText, QModbusDevice::Error error) [protected]
*/

/*
virtual bool open() = 0 [protected]
*/

/*
virtual void close() = 0 [protected]
*/

void QModbusDeviceSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QMODBUSDEVICE_ONERROROCCURRED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QModbusDeviceSlots_connect_signal( "errorOccurred(QModbusDevice::Error)", "errorOccurred(QModbusDevice::Error)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QMODBUSDEVICE_ONSTATECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,8,0))
  QModbusDeviceSlots_connect_signal( "stateChanged(QModbusDevice::State)", "stateChanged(QModbusDevice::State)" );
#else
  hb_retl( false );
#endif
}

#pragma ENDDUMP

/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QLOCALE
REQUEST QVOICE
#endif

CLASS QTextToSpeech INHERIT QObject

   METHOD new

   METHOD availableEngines
   METHOD availableLocales
   METHOD availableVoices
   METHOD locale
   METHOD pause
   METHOD pitch
   METHOD rate
   METHOD resume
   METHOD say
   METHOD setLocale
   METHOD setPitch
   METHOD setRate
   METHOD setVoice
   METHOD setVolume
   METHOD state
   METHOD stop
   METHOD voice
   METHOD volume

   METHOD onLocaleChanged
   METHOD onPitchChanged
   METHOD onRateChanged
   METHOD onStateChanged
   METHOD onVoiceChanged
   METHOD onVolumeChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QTextToSpeech
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QTextToSpeech>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QTextToSpeech>
#endif

#include <QVector>
#include <QLocale>
#include <QVoice>

/*
explicit QTextToSpeech(QObject *parent = nullptr)
*/
void QTextToSpeech_new1 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * o = new QTextToSpeech ( OPQOBJECT(1,nullptr) );
  _qt5xhb_returnNewObject( o, false );
#endif
}

/*
explicit QTextToSpeech(const QString &engine, QObject *parent = nullptr)
*/
void QTextToSpeech_new2 ()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * o = new QTextToSpeech ( PQSTRING(1), OPQOBJECT(2,nullptr) );
  _qt5xhb_returnNewObject( o, false );
#endif
}

//[1]explicit QTextToSpeech(QObject *parent = nullptr)
//[2]explicit QTextToSpeech(const QString &engine, QObject *parent = nullptr)

HB_FUNC_STATIC( QTEXTTOSPEECH_NEW )
{
  if( ISBETWEEN(0,1) && ISOPTQOBJECT(1) )
  {
    QTextToSpeech_new1();
  }
  else if( ISBETWEEN(1,2) && ISCHAR(1) && ISOPTQOBJECT(2) )
  {
    QTextToSpeech_new2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
State state() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_STATE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->state () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
QLocale locale() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_LOCALE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QLocale * ptr = new QLocale( obj->locale () );
      _qt5xhb_createReturnClass ( ptr, "QLOCALE", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setLocale(const QLocale &locale)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SETLOCALE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQLOCALE(1) )
    {
      obj->setLocale ( *PQLOCALE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QVoice voice() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_VOICE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QVoice * ptr = new QVoice( obj->voice () );
      _qt5xhb_createReturnClass ( ptr, "QVOICE", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setVoice(const QVoice &voice)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SETVOICE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQVOICE(1) )
    {
      obj->setVoice ( *PQVOICE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
double rate() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_RATE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RDOUBLE( obj->rate () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setRate(double rate)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SETRATE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setRate ( PDOUBLE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
double pitch() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_PITCH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RDOUBLE( obj->pitch () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setPitch(double pitch)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SETPITCH )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setPitch ( PDOUBLE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
double volume() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_VOLUME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RDOUBLE( obj->volume () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
void setVolume(double volume)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SETVOLUME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setVolume ( PDOUBLE(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QVector<QLocale> availableLocales() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_AVAILABLELOCALES )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QVector<QLocale> list = obj->availableLocales ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QLOCALE" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QLocale *) new QLocale ( list[i] ) );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          PHB_ITEM pDestroy = hb_itemNew( NULL );
          hb_itemPutL( pDestroy, true );
          hb_objSendMsg( pObject, "_SELF_DESTRUCTION", 1, pDestroy );
          hb_itemRelease( pDestroy );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QLOCALE", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
QVector<QVoice> availableVoices() const
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_AVAILABLEVOICES )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QVector<QVoice> list = obj->availableVoices ();
      PHB_DYNS pDynSym = hb_dynsymFindName( "QVOICE" );
      PHB_ITEM pArray = hb_itemArrayNew(0);
      int i;
      for(i=0;i<list.count();i++)
      {
        if( pDynSym )
        {
          hb_vmPushDynSym( pDynSym );
          hb_vmPushNil();
          hb_vmDo( 0 );
          PHB_ITEM pObject = hb_itemNew( NULL );
          hb_itemCopy( pObject, hb_stackReturnItem() );
          PHB_ITEM pItem = hb_itemNew( NULL );
          hb_itemPutPtr( pItem, (QVoice *) new QVoice ( list[i] ) );
          hb_objSendMsg( pObject, "_POINTER", 1, pItem );
          hb_itemRelease( pItem );
          PHB_ITEM pDestroy = hb_itemNew( NULL );
          hb_itemPutL( pDestroy, true );
          hb_objSendMsg( pObject, "_SELF_DESTRUCTION", 1, pDestroy );
          hb_itemRelease( pDestroy );
          hb_arrayAddForward( pArray, pObject );
          hb_itemRelease( pObject );
        }
        else
        {
          hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QVOICE", HB_ERR_ARGS_BASEPARAMS );
        }
      }
      hb_itemReturnRelease(pArray);
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
#endif
}

/*
static QStringList availableEngines()
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_AVAILABLEENGINES )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
    if( ISNUMPAR(0) )
  {
      RQSTRINGLIST( QTextToSpeech::availableEngines () );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
#endif
}

/*
void say(const QString &text)
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_SAY )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->say ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void stop()
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_STOP )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->stop ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void pause()
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_PAUSE )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->pause ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void resume()
*/
HB_FUNC_STATIC( QTEXTTOSPEECH_RESUME )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeech * obj = (QTextToSpeech *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->resume ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

void QTextToSpeechSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QTEXTTOSPEECH_ONLOCALECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "localeChanged(QLocale)", "localeChanged(QLocale)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QTEXTTOSPEECH_ONPITCHCHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "pitchChanged(double)", "pitchChanged(double)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QTEXTTOSPEECH_ONRATECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "rateChanged(double)", "rateChanged(double)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QTEXTTOSPEECH_ONSTATECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "stateChanged(QTextToSpeech::State)", "stateChanged(QTextToSpeech::State)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QTEXTTOSPEECH_ONVOICECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "voiceChanged(QVoice)", "voiceChanged(QVoice)" );
#else
  hb_retl( false );
#endif
}

HB_FUNC_STATIC( QTEXTTOSPEECH_ONVOLUMECHANGED )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,10,0))
  QTextToSpeechSlots_connect_signal( "volumeChanged(int)", "volumeChanged(int)" );
#else
  hb_retl( false );
#endif
}

#pragma ENDDUMP

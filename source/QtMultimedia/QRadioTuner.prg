/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QRADIODATA
#endif

CLASS QRadioTuner INHERIT QMediaObject

   METHOD new
   METHOD delete

   METHOD availability
   METHOD band
   METHOD cancelSearch
   METHOD error
   METHOD errorString
   METHOD frequency
   METHOD frequencyStep
   METHOD isAntennaConnected
   METHOD isBandSupported
   METHOD isMuted
   METHOD isSearching
   METHOD isStereo
   METHOD radioData
   METHOD searchAllStations
   METHOD searchBackward
   METHOD searchForward
   METHOD setBand
   METHOD setFrequency
   METHOD setMuted
   METHOD setStereoMode
   METHOD setVolume
   METHOD signalStrength
   METHOD start
   METHOD state
   METHOD stereoMode
   METHOD stop
   METHOD volume

   METHOD onAntennaConnectedChanged
   METHOD onBandChanged
   METHOD onError
   METHOD onFrequencyChanged
   METHOD onMutedChanged
   METHOD onSearchingChanged
   METHOD onSignalStrengthChanged
   METHOD onStateChanged
   METHOD onStationFound
   METHOD onStereoStatusChanged
   METHOD onVolumeChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QRadioTuner
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QRadioTuner>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QRadioTuner>
#endif

#include <QRadioData>

/*
explicit QRadioTuner(QObject *parent = Q_NULLPTR)
*/
HB_FUNC_STATIC( QRADIOTUNER_NEW )
{
  if( ISBETWEEN(0,1) && (ISQOBJECT(1)||ISNIL(1)) )
  {
    QRadioTuner * o = new QRadioTuner ( OPQOBJECT(1,0) );
    _qt5xhb_returnNewObject( o, false );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
~QRadioTuner()
*/
HB_FUNC_STATIC( QRADIOTUNER_DELETE )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
State state() const
*/
HB_FUNC_STATIC( QRADIOTUNER_STATE )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->state () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
Band band() const
*/
HB_FUNC_STATIC( QRADIOTUNER_BAND )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->band () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setBand(Band band)
*/
HB_FUNC_STATIC( QRADIOTUNER_SETBAND )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setBand ( (QRadioTuner::Band) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int frequency() const
*/
HB_FUNC_STATIC( QRADIOTUNER_FREQUENCY )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->frequency () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setFrequency(int frequency)
*/
HB_FUNC_STATIC( QRADIOTUNER_SETFREQUENCY )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setFrequency ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isStereo() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ISSTEREO )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isStereo () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
StereoMode stereoMode() const
*/
HB_FUNC_STATIC( QRADIOTUNER_STEREOMODE )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->stereoMode () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setStereoMode(QRadioTuner::StereoMode mode)
*/
HB_FUNC_STATIC( QRADIOTUNER_SETSTEREOMODE )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setStereoMode ( (QRadioTuner::StereoMode) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int signalStrength() const
*/
HB_FUNC_STATIC( QRADIOTUNER_SIGNALSTRENGTH )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->signalStrength () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int volume() const
*/
HB_FUNC_STATIC( QRADIOTUNER_VOLUME )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->volume () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setVolume(int volume)
*/
HB_FUNC_STATIC( QRADIOTUNER_SETVOLUME )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setVolume ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isMuted() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ISMUTED )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isMuted () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setMuted(bool muted)
*/
HB_FUNC_STATIC( QRADIOTUNER_SETMUTED )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setMuted ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isSearching() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ISSEARCHING )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isSearching () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool isAntennaConnected() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ISANTENNACONNECTED )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isAntennaConnected () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QRadioData *radioData() const
*/
HB_FUNC_STATIC( QRADIOTUNER_RADIODATA )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QRadioData * ptr = obj->radioData ();
      _qt5xhb_createReturnQObjectClass ( ptr, "QRADIODATA" );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QMultimedia::AvailabilityStatus availability() const override
*/
HB_FUNC_STATIC( QRADIOTUNER_AVAILABILITY )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->availability () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
bool isBandSupported(Band b) const
*/
HB_FUNC_STATIC( QRADIOTUNER_ISBANDSUPPORTED )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      RBOOL( obj->isBandSupported ( (QRadioTuner::Band) hb_parni(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
int frequencyStep(Band band) const
*/
HB_FUNC_STATIC( QRADIOTUNER_FREQUENCYSTEP )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      RINT( obj->frequencyStep ( (QRadioTuner::Band) hb_parni(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
Error error() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ERROR )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->error () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString errorString() const
*/
HB_FUNC_STATIC( QRADIOTUNER_ERRORSTRING )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->errorString () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void searchForward()
*/
HB_FUNC_STATIC( QRADIOTUNER_SEARCHFORWARD )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->searchForward ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void searchBackward()
*/
HB_FUNC_STATIC( QRADIOTUNER_SEARCHBACKWARD )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->searchBackward ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void searchAllStations(QRadioTuner::SearchMode searchMode = QRadioTuner::SearchFast)
*/
HB_FUNC_STATIC( QRADIOTUNER_SEARCHALLSTATIONS )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISBETWEEN(0,1) && ISOPTNUM(1) )
    {
      obj->searchAllStations ( ISNIL(1)? (QRadioTuner::SearchMode) QRadioTuner::SearchFast : (QRadioTuner::SearchMode) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void cancelSearch()
*/
HB_FUNC_STATIC( QRADIOTUNER_CANCELSEARCH )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->cancelSearch ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void start()
*/
HB_FUNC_STATIC( QRADIOTUNER_START )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->start ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void stop()
*/
HB_FUNC_STATIC( QRADIOTUNER_STOP )
{
  QRadioTuner * obj = (QRadioTuner *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->stop ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QPair<int,int> frequencyRange(Band band) const
*/

void QRadioTunerSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QRADIOTUNER_ONSTATECHANGED )
{
  QRadioTunerSlots_connect_signal( "stateChanged(QRadioTuner::State)", "stateChanged(QRadioTuner::State)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONBANDCHANGED )
{
  QRadioTunerSlots_connect_signal( "bandChanged(QRadioTuner::Band)", "bandChanged(QRadioTuner::Band)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONFREQUENCYCHANGED )
{
  QRadioTunerSlots_connect_signal( "frequencyChanged(int)", "frequencyChanged(int)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONSTEREOSTATUSCHANGED )
{
  QRadioTunerSlots_connect_signal( "stereoStatusChanged(bool)", "stereoStatusChanged(bool)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONSEARCHINGCHANGED )
{
  QRadioTunerSlots_connect_signal( "searchingChanged(bool)", "searchingChanged(bool)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONSIGNALSTRENGTHCHANGED )
{
  QRadioTunerSlots_connect_signal( "signalStrengthChanged(int)", "signalStrengthChanged(int)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONVOLUMECHANGED )
{
  QRadioTunerSlots_connect_signal( "volumeChanged(int)", "volumeChanged(int)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONMUTEDCHANGED )
{
  QRadioTunerSlots_connect_signal( "mutedChanged(bool)", "mutedChanged(bool)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONSTATIONFOUND )
{
  QRadioTunerSlots_connect_signal( "stationFound(int,QString)", "stationFound(int,QString)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONANTENNACONNECTEDCHANGED )
{
  QRadioTunerSlots_connect_signal( "antennaConnectedChanged(bool)", "antennaConnectedChanged(bool)" );
}

HB_FUNC_STATIC( QRADIOTUNER_ONERROR )
{
  QRadioTunerSlots_connect_signal( "error(QRadioTuner::Error)", "error(QRadioTuner::Error)" );
}

#pragma ENDDUMP

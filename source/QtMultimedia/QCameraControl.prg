/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

CLASS QCameraControl INHERIT QMediaObject

   METHOD delete

   METHOD canChangeProperty
   METHOD captureMode
   METHOD isCaptureModeSupported
   METHOD setCaptureMode
   METHOD setState
   METHOD state
   METHOD status

   METHOD onCaptureModeChanged
   METHOD onError
   METHOD onStateChanged
   METHOD onStatusChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QCameraControl
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QCameraControl>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QCameraControl>
#endif

/*
explicit QCameraControl(QObject *parent = Q_NULLPTR) (protected)
*/

/*
~QCameraControl()
*/
HB_FUNC_STATIC( QCAMERACONTROL_DELETE )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
virtual bool canChangeProperty(PropertyChangeType changeType, QCamera::Status status) const = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_CANCHANGEPROPERTY )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(2) && ISNUM(1) && ISNUM(2) )
    {
      RBOOL( obj->canChangeProperty ( (QCameraControl::PropertyChangeType) hb_parni(1), (QCamera::Status) hb_parni(2) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
virtual QCamera::CaptureModes captureMode() const = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_CAPTUREMODE )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->captureMode () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
virtual bool isCaptureModeSupported(QCamera::CaptureModes mode) const = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_ISCAPTUREMODESUPPORTED )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      RBOOL( obj->isCaptureModeSupported ( (QCamera::CaptureModes) hb_parni(1) ) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
virtual void setCaptureMode(QCamera::CaptureModes mode) = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_SETCAPTUREMODE )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setCaptureMode ( (QCamera::CaptureModes) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
virtual void setState(QCamera::State state) = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_SETSTATE )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setState ( (QCamera::State) hb_parni(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
virtual QCamera::State state() const = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_STATE )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->state () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
virtual QCamera::Status status() const = 0
*/
HB_FUNC_STATIC( QCAMERACONTROL_STATUS )
{
  QCameraControl * obj = (QCameraControl *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->status () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

void QCameraControlSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QCAMERACONTROL_ONCAPTUREMODECHANGED )
{
  QCameraControlSlots_connect_signal( "captureModeChanged(QCamera::CaptureModes)", "captureModeChanged(QCamera::CaptureModes)" );
}

HB_FUNC_STATIC( QCAMERACONTROL_ONERROR )
{
  QCameraControlSlots_connect_signal( "error(int,QString)", "error(int,QString)" );
}

HB_FUNC_STATIC( QCAMERACONTROL_ONSTATECHANGED )
{
  QCameraControlSlots_connect_signal( "stateChanged(QCamera::State)", "stateChanged(QCamera::State)" );
}

HB_FUNC_STATIC( QCAMERACONTROL_ONSTATUSCHANGED )
{
  QCameraControlSlots_connect_signal( "statusChanged(QCamera::Status)", "statusChanged(QCamera::Status)" );
}

#pragma ENDDUMP

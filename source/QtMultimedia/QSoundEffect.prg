/*

  Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QURL
#endif

CLASS QSoundEffect INHERIT QObject

   METHOD new
   METHOD delete

   METHOD category
   METHOD isLoaded
   METHOD isMuted
   METHOD isPlaying
   METHOD loopCount
   METHOD loopsRemaining
   METHOD play
   METHOD setCategory
   METHOD setLoopCount
   METHOD setMuted
   METHOD setSource
   METHOD setVolume
   METHOD source
   METHOD status
   METHOD stop
   METHOD supportedMimeTypes
   METHOD volume

   METHOD onCategoryChanged
   METHOD onLoadedChanged
   METHOD onLoopCountChanged
   METHOD onLoopsRemainingChanged
   METHOD onMutedChanged
   METHOD onPlayingChanged
   METHOD onSourceChanged
   METHOD onStatusChanged
   METHOD onVolumeChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject () CLASS QSoundEffect
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <Qt>

#ifndef __XHARBOUR__
#include <QSoundEffect>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QSoundEffect>
#endif

/*
explicit QSoundEffect(QObject *parent = Q_NULLPTR)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_NEW )
{
  if( ISBETWEEN(0,1) && (ISQOBJECT(1)||ISNIL(1)) )
  {
    QSoundEffect * o = new QSoundEffect ( OPQOBJECT(1,0) );
    _qt5xhb_returnNewObject( o, false );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
~QSoundEffect()
*/
HB_FUNC_STATIC( QSOUNDEFFECT_DELETE )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    delete obj;
    obj = NULL;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( NULL, NULL );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QUrl source() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SOURCE )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      QUrl * ptr = new QUrl( obj->source () );
      _qt5xhb_createReturnClass ( ptr, "QURL", true );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setSource(const QUrl &url)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SETSOURCE )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISQURL(1) )
    {
      obj->setSource ( *PQURL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int loopCount() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_LOOPCOUNT )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->loopCount () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setLoopCount(int loopCount)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SETLOOPCOUNT )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setLoopCount ( PINT(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
int loopsRemaining() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_LOOPSREMAINING )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RINT( obj->loopsRemaining () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
qreal volume() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_VOLUME )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQREAL( obj->volume () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setVolume(qreal volume)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SETVOLUME )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISNUM(1) )
    {
      obj->setVolume ( PQREAL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isMuted() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_ISMUTED )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isMuted () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setMuted(bool muted)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SETMUTED )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISLOG(1) )
    {
      obj->setMuted ( PBOOL(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isPlaying() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_ISPLAYING )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isPlaying () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
Status status() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_STATUS )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RENUM( obj->status () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
QString category() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_CATEGORY )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RQSTRING( obj->category () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void setCategory(const QString &category)
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SETCATEGORY )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(1) && ISCHAR(1) )
    {
      obj->setCategory ( PQSTRING(1) );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isLoaded() const
*/
HB_FUNC_STATIC( QSOUNDEFFECT_ISLOADED )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      RBOOL( obj->isLoaded () );
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }
}

/*
void play()
*/
HB_FUNC_STATIC( QSOUNDEFFECT_PLAY )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->play ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void stop()
*/
HB_FUNC_STATIC( QSOUNDEFFECT_STOP )
{
  QSoundEffect * obj = (QSoundEffect *) _qt5xhb_itemGetPtrStackSelfItem();

  if( obj )
  {
    if( ISNUMPAR(0) )
    {
      obj->stop ();
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
static QStringList supportedMimeTypes()
*/
HB_FUNC_STATIC( QSOUNDEFFECT_SUPPORTEDMIMETYPES )
{
    if( ISNUMPAR(0) )
  {
      RQSTRINGLIST( QSoundEffect::supportedMimeTypes () );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

void QSoundEffectSlots_connect_signal ( const QString & signal, const QString & slot );

HB_FUNC_STATIC( QSOUNDEFFECT_ONSOURCECHANGED )
{
  QSoundEffectSlots_connect_signal( "sourceChanged()", "sourceChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONLOOPCOUNTCHANGED )
{
  QSoundEffectSlots_connect_signal( "loopCountChanged()", "loopCountChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONLOOPSREMAININGCHANGED )
{
  QSoundEffectSlots_connect_signal( "loopsRemainingChanged()", "loopsRemainingChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONVOLUMECHANGED )
{
  QSoundEffectSlots_connect_signal( "volumeChanged()", "volumeChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONMUTEDCHANGED )
{
  QSoundEffectSlots_connect_signal( "mutedChanged()", "mutedChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONLOADEDCHANGED )
{
  QSoundEffectSlots_connect_signal( "loadedChanged()", "loadedChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONPLAYINGCHANGED )
{
  QSoundEffectSlots_connect_signal( "playingChanged()", "playingChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONSTATUSCHANGED )
{
  QSoundEffectSlots_connect_signal( "statusChanged()", "statusChanged()" );
}

HB_FUNC_STATIC( QSOUNDEFFECT_ONCATEGORYCHANGED )
{
  QSoundEffectSlots_connect_signal( "categoryChanged()", "categoryChanged()" );
}

#pragma ENDDUMP
